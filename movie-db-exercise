1) Write a SQL query to find the name and year of the movies. Return movie title, movie release year.
Ans: select mov_title as Movie, mov_year as [Year of release] from movie;

2) write a SQL query to find when the movie ‘American Beauty’ released. Return movie release year.
Ans: select mov_year from movie where mov_title = 'American Beauty';

3) write a SQL query to find the movie, which was made in the year 1999. Return movie title.
Ans: select mov_title as [Movie Title] from movie where mov_year = 1999;

4) write a SQL query to find those movies, which was made before 1998. Return movie title.
Ans: select mov_title as [Movie Title] from movie where mov_year < 1998;

5) write a SQL query to find the name of all reviewers and movies together in a single list.
Ans: select movie.mov_title as Movie, 
	   reviewer.rev_name as Reviewer 
	   from movie inner join rating 
	   on movie.mov_id=rating.mov_id
	   inner join reviewer
	   on rating.rev_id=reviewer.rev_id;

6) write a SQL query to find all reviewers who have rated 7 or more stars to their rating. Return reviewer name.
Ans: select reviewer.rev_name from rating inner join reviewer on rating.rev_id=reviewer.rev_id and rev_stars >= 7;

7) write a SQL query to find the movies without any rating. Return movie title.
Ans: select movie.mov_title from rating inner join movie on rating.mov_id=movie.mov_id where rating.num_o_ratings is null;

8) write a SQL query to find the movies with ID 905 or 907 or 917. Return movie title.
Ans: select mov_title from movie where mov_id in (905,907,917);

9) write a SQL query to find those movie titles, which include the words 'Boogie Nights'. Sort the result-set in ascending order by movie year. Return movie ID, movie title and movie release year.
Ans: select mov_id,mov_title,year(mov_dt_rel) as [Release Year] from movie where mov_title like '%boogie night%' order by mov_year;

10) write a SQL query to find those actors whose first name is 'Woody' and the last name is 'Allen'. Return actor ID;
Ans: select act_id from actor where act_fname = 'Woody' and act_lname='Allen';



#SubQueries

1)Find the actors who played a role in the movie 'Annie Hall'. Return all the fields of actor table.
Ans: select * from actor where act_id = (select act_id from movie_cast where mov_id = (select mov_id from movie where mov_title = 'Annie Hall'));

2)write a SQL query to find the director who directed a movie that casted a role for 'Eyes Wide Shut'. Return director first name, last name.
Ans: select * from director where dir_id = (select dir_id from movie_direction where mov_id = (select mov_id from movie where mov_title ='eyes wide shut'))

3)write a SQL query to find those movies, which released in the country besides UK. Return movie title, movie year, movie time, date of release, releasing country.
Ans: select mov_title,mov_year,mov_time,mov_dt_rel,mov_rel_country from movie where mov_rel_country not in('uk');

4)write a SQL query to find those movies where reviewer is unknown. Return movie title, year, release date, director first name, last name, actor first name, last name.
Ans: select mov_title, mov_year, mov_dt_rel, dir_fname, dir_lname, act_fname, act_lname from movie m
     join movie_cast mc on m.mov_id  = mc.mov_id 
     join movie_direction md on md.mov_id = m.mov_id
     join rating r on r.mov_id = m.mov_id
     join actor a on a.act_id = mc.act_id
     join director d on d.dir_id = md.dir_id
     where rev_id in (select rev_id from reviewer where rev_name = '')
5)write a SQL query to find those movies directed by the director whose first name is ‘Woddy’ and last name is ‘Allen’. Return movie title. 
Ans: select mov_title from movie 
     where mov_id=(select mov_id from movie_direction where dir_id = (select dir_id from director where dir_fname='Woody' and dir_lname='Allen'));

6)write a SQL query to find those years, which produced at least one movie and that, received a rating of more than three stars. Sort the result-set in ascending order by movie year. Return movie year.
Ans: select distinct mov_year from movie
     where mov_id = any(select mov_id from rating where rev_stars > 3) order by mov_year;

7)write a SQL query to find those movies, which have no ratings. Return movie title.
Ans: select distinct mov_year from movie 
     where mov_id = any(select mov_id from rating where num_o_ratings is null)

8)write a SQL query to find those reviewers who have rated nothing for some movies. Return reviewer name.
Ans: select rev_name from reviewer
     where rev_id = any(select rev_id from rating where rev_stars is null)

9)write a SQL query to find those movies, which reviewed by a reviewer and got a rating. Sort the result-set in ascending order by reviewer name, movie title, review Stars. Return reviewer name, movie title, review Stars.
Ans: SELECT rev_name, mov_title, rev_stars 
      FROM reviewer, rating, movie 
      WHERE reviewer.rev_id=rating.rev_id 
      AND movie.mov_id=rating.mov_id 
      AND reviewer.rev_name IS NOT NULL 
      AND rating.rev_stars IS NOT NULL
      and reviewer.rev_name is not null
      ORDER BY rev_name, mov_title, rev_stars;

10)write a SQL query to find those reviewers who rated more than one movie. Group the result set on reviewer’s name, movie title. Return reviewer’s name, movie title.
Ans: select * from movie where mov_id = any(select mov_id from rating where rev_id = (select rev_id from rating group by rev_id having count(*) > 1))
